Unit test: testStartNextWave()
Description: Tests if the start combat button exists and starts the next wave on click
How it verifies functionality: The test will press the start combat button and then verify that enemies were released by the GameAdmin class.

Unit test: testEnemyMoving()
Description: Verifies that any enemy released is moving
How it verifies functionality: The test will press the start combat button, and after a short time it will verify that the enemyâ€™s spawn position and current position are different.

Unit test: testEnemyAppear()
Description: Verifies that enemies appear at the start of the map when clicking the start combat button
How it verifies functionality: The test will enter the game screen, click the start combat button and check if the enemy is visible

Unit test: testEnemyOnPath()
Description: Verifies that enemies are always on the right path
How it verifies functionality: The test will enter the game screen, click the start combat button and periodically check every couple of seconds if the enemy is within the path

Unit test: testMoveToGameOver()
Description: Verifies that the game over shows up when health is 0.
How it verifies functionality: The test will enter the game screen, set health to 0, and check to see if the game over screen is there.

Unit test: testRestartGame()
Description: Verifies that the restart button resets the game to the welcome screen
How it verifies functionality: The test will navigate to the game over screen, click restart button, and check to make sure the welcome screen is the new screen.

Unit test: testEnemyDamage()
Description: Verifies if the enemy does the correct damage number to the monument
How it verifies functionality: the test will spawn an enemy on the monument and damage it once and assert that the health is equal to the expected health

Unit test: testNoTowerOnGameOver()
Description: Verifies if the game over screen keeps the player from placing a tower once the game has been lost
How it verifies functionality: The test will navigate to the game over screen then attempt to place a tower, and it should fail to do so

Unit test: testEnemyType()
Description: Verifies that the correct type of enemy is being spawned
How it verifies functionality: This test will navigate to the game screen and then tell the game admin to spawn one of every type of enemy and check to see if the enemy being spawned is the correct type

Unit test: testEnemyEasySpeed()
Description: Verifies that the enemy is moving at the correct speed for easy level
How it verifies functionality: This test will navigate to the game screen, spawn an enemy, calculate where an enemy should be a second later, then make sure that enemy is at the correct location at the correct time

Unit test: testEnemyMediumSpeed()
Description: Verifies that the enemy is moving at the correct speed for easy level
How it verifies functionality: This test will navigate to the game screen, spawn an enemy, calculate where an enemy should be a second later, then make sure that enemy is at the correct location at the correct time

Unit test: testEnemyHardSpeed()
Description: Verifies that the enemy is moving at the correct speed for easy level
How it verifies functionality: This test will navigate to the game screen, spawn an enemy, calculate where an enemy should be a second later, then make sure that enemy is at the correct location at the correct time